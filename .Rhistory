inTrain <- createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
names(concrete)
names(mixtures)
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
install.packages("Hmisc)")
install.packages("Hmisc")
library(Hmisc)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,color=flyAsh)
name(training)
names(training)
plot(training$CompressiveStrength,color=FlyAsh)
plot(training$CompressiveStrength,color=training$FlyAsh)
library(ggplot)
library(ggplot2)
qplot(training$CompressiveStrength,color=training$FlyAsh)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,color=FlyAsh,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=FlyAsh,data=training)
names(training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=Cement,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=BlastFurnanceSlag,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=BlastFurnaceSlag,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=Water,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=Superplasticizer,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=CoarseAggregate,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=FineAggregate,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,color=Age,data=training)
qplot(Superplasticizer,data=training)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
name.set  <- names(training)
?grep
name.IL = grepl("^IL",name.set)
table(name.IL)
name.IL = name.set[grepl("^IL",name.set)]
name.IL
name.IL = grepl("^IL",name.set)
dim(training)
training.IL[name.IL]
training.IL <- training[name.IL]
names(training.IL)
prinComp <- prcomp(training.IL)
dim(prinComp)
summary(prinComp)
plot(prinComp$x[,1],prinComp$x[,2])
prinComp$sdev
prinComp$pov
prinComp$sdev^2
?caret
library(caret)
?caret
preProc <- preProcess(training.IL,method="pca")
names(training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name.set  <- names(training)
name.IL = grepl("^IL",name.set)
name.IL[1] = "TRUE"
name.IL
training.IL <- training[name.IL]
training.IL <- training[,name.IL]
training.IL <- training[name.IL]
name.IL = grepl("^IL",name.set)
name.IL[1] == "TRUE"
training.IL <- training[name.IL]
name.IL[1] = "TRUE"
test = logical(name.IL)
test = as.logical(name.IL)
name.IL = grepl("^IL",name.set)
name.IL[1] = as.logical("TRUE")
training.IL <- training[name.IL]
names(trainin.IL)
names(training.IL)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name.set  <- names(training)
name.IL = grepl("^IL",name.set)
training.IL <- training[name.IL]
?preProcess
preProc <- preProcess(training.IL, method = "pca")
preProc$numComp
preProc <- preProcess(training.IL, method = "pca",thresh=0.8)
preProc$numComp
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing.IL <- testing[name.IL]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name.set  <- names(training)
name.IL = grepl("^IL",name.set)
name.IL[1] = as.logical("TRUE")
training.IL <- training[name.IL]
testing.IL <- testing[name.IL]
modelFit1 <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",thresh=0.8,data=training.IL)
modelFit1 <- train(training.IL$diagnosis ~ ., method="lm",preProcess="pca",thresh=0.8,data=training.IL)
modelFit1 <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",thresh=0.8,data=training.IL)
install.packages("glm")
install.packages("e1071")
modelFit1 <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",thresh=0.8,data=training.IL)
modelFit2 <- train(training.IL$diagnosis ~ ., method = "glm",data=training.IL)
modelFit1 <- train(training.IL$diagnosis ~ ., method = "glm",preProcess="pca",pcaComp=7,data=training.IL)
modelFit1 <- train(training.IL$diagnosis ~ ., method = "glm",data=training.IL)
confusionMatrix(testing.IL$diagnosis,predict(modelFit1,testing>IL))
confusionMatrix(testing.IL$diagnosis,predict(modelFit1,testing.IL))
preProc <- preProcess(training.IL[,2:251],method="pca",thresh=8),
training.IL[2,2:251]
training.IL[,2:251]
dim(training.IL)
preProc <- preProcess(training.IL[,2:13],method="pca",thresh=8),
training[,2:13]
head(training.IL[,2:13])
preProc <- preProcess(data=training.IL[,2:13],method="pca",thresh=8),
preProc <- preProcess(training.IL[,2:13],method="pca",thresh=8)
preProc <- preProcess(training.IL[,2:13],method="pca",thresh=0.8)
modelFit2 <- train(training.IL$diagnosis ~ ., method = "glm",data=preProc)
trainPC <- predict(preProc, training.IL[,2:13])
modelFit2 <- train(training.IL$diagnosis ~ ., method = "glm",data=trainPC)
confusionMatrix(testing.IL$diagnosis,predict(modelFit1,testing.IL))
confusionMatrix(testing.IL$diagnosis,predict(modelFit2,testing.IL))
modelFit2 <- train(training.IL$diagnosis ~ ., method = "glm",data=trainPC)
confusionMatrix(testing.IL$diagnosis,predict(modelFit2,testing.IL))
testPC <- predict(preProc,testing.IL[,2:13])
confusionMatrix(testing.IL$diagnosis,predict(modelFit2,testing.IL))
confusionMatrix(testing.IL$diagnosis,predict(modelFit2,testPC))
pkgDep(c("ggplot2"))
update.packages()
update.packages()
quit()
update.packages()
library(miniCRAN)
install.packges("miniCRAN")
install.packages("miniCRAN")
library(miniCRAN)
pkg <- c("ggplot2")
pkgDep(pkg)
pkg <- c("ggplot2","tidyr","plyr")
pkgDep(pkg)
getOption("repos")
installed.packages()
myPkgs <- installed.packages()
View(myPkgs)
basePkgs <- myPkgs[myPkgs$Priority=="base"]
basePkgs <- myPkgs(myPkgs$Priority=="base"])
basePkgs <- myPkgs(myPkgs$Priority=="base")
basePkgs <- myPkgs where myPkgs$Priority=="base"
basePkgs <- myPkgs if myPkgs$Priority=="base"
basePkgs <- myPkgs[,myPkgs$Priority=="base"]
basePkgs <- myPkgs[,Priority=="base"]
names(myPkgs)
type(myPkgs)
class(myPkgs)
myPkgs <- as.dataframe(myPkgs)
myPkgs <- as.Dataframe(myPkgs)
myPkgs <- as.data.frame(myPkgs)
basePkgs <- myPkgs[,Priority=="base"]
basePkgs <- myPkgs[,myPkgs$Priority=="base"]
basePkgs <- myPkgs[,myPkgs$Priority="base"]
names(myPkgs)
myPkgs(myPkgs$Priority=="base")
myPkgs[myPkgs$Priority=="base"]
basePkgs=subset(myPkgs, Priority=="base")
View(basePkgs)
reccPakgs=subset(myPkgs, Priority=="recommended")
reccPkgs=subset(myPkgs, Priority=="recommended")
View(reccPkgs)
otherPkg <- subset(myPkgs, Priority != c("base","recommended"))
View(otherPkg)
otherPkg <- subset(myPkgs, Priority != "base"))
otherPkg <- subset(myPkgs, Priority != "base")
myPkgs <- as.data.frame(installed.packages())
basePkgs <- subset(myPkgs, Priority =="base")
table(myPkgs$Priority)
table(myPkgs$Priority, useNA=="yes")
table(myPkgs$Priority, useNA=="always")
table(myPkgs$Priority, useNA="always")
View(basePkgs)
.libpaths()
.libPaths()
reccPkgs <- subset(myPkgs, Priority="reccomended")
reccPkgs <- subset(myPkgs, Priority=="reccomended")
reccPkgs <- subset(myPkgs, Priority=="recommended")
View(reccPkgs)
sort(myPkgs,Priority)
table(mPkgs$Library)
table(myPkgs$Library)
table(myPkgs$License)
table(basePkgs$License)
str(myPkgs$License)
levels(myPkgs$License)
sessionInfo()
myPkgs <- installed.packages()[,1]
myPkgs
class(myPkgs)
pkgDep(myPkgs)
toKeep <- myPkgs[! myPkgs %in% notRecogList]
notRecogList <- c("base",
"compiler",
"datasets",
"graphics",
"grDevices",
"grid",
"methods",
"parallel",
"splines",
"stats",
"stats4",
"tcltk",
"tools",
"utils",
"CausalImpact",
"manipulate",
"rstudio")
myPkgs <- installed.packages()[,1]
toKeep <- myPkgs[! myPkgs %in% notRecogList]
pkgDep(toKeep)
source('~/Documents/Deloitte/ANZ/Collie/CRAN/createRepository.R')
source('~/.active-rstudio-document')
source('~/Documents/Deloitte/ANZ/Collie/CRAN/createRepository.R')
pkgsToGet
length(myPkgs)
length(pkgsToGet)
possiblySpurious  <- pkgsToGet[! pkgsToGet %in% myPkgs]
length(possiblySpurious)
head(possiblySpurious)
head(possiblySpurious,20)
source('~/Documents/Deloitte/ANZ/Collie/CRAN/createRepository.R')
extras
p <- makeDepGraph(extras, enhances = TRUE)
?plot.pkgDepGraph
set.seed(20140917)
plot(p, cex=1.5, vertex.size=15)
p <- makeDepGraph(extras, enhances = TRUE)
?plot.pkgDepGraph
set.seed(20140917)
plot(p, cex=0.5, vertex.size=5)
library(miniCRAN)
baselinePkgs <- c("xlsx","ggplot2","knitr","xtable","zoo","xts","data.table",
"tidyr","RUnit","Testthat","roxygen2","memoise","pmml","plyr","reshape2","stringr",
"lubridate","XML","jsonlite","magrittr")
repoPkgs <- pkgDep(baselinePkgs)
baselinePkgs <- c("xlsx","ggplot2","knitr","xtable","zoo","xts","data.table",
"tidyr","RUnit","testthat","roxygen2","memoise","pmml","plyr","reshape2","stringr",
"lubridate","XML","jsonlite","magrittr")
repoPkgs <- pkgDep(baselinePkgs)
length(repoPkgs)
options(repos = c(CRAN = "http://cran.at.r-project.org/"))
localCRAN <- "/Users/kendra/local-CRAN-repo"
dir.create(localCRAN)
makeRepo(repoPkgs, path = localCRAN, type = "source")
list.files(path = localCRAN, recursive = TRUE)
length(repoPkgs)
uri <- paste0("file:///", normalizePath(localCRAN))
options(repos = c(CRAN=uri))
getOption("repos")
available.packages(type="source")
available.packages()
install.packages("memoise")
options(repos = c(CRAN = "http://cran.ms.unimelb.edu.au/"))
repoPkgs <- pkgDep(c("plyr))
)
""
q
"
repoPkgs <- pkgDep(c("plyr"))
options(repos = c(CRAN = "http://packages.revolutionanalytics.com/cran/3.1/stable/"))
localCRAN <- "/Users/kendra/local-CRAN-repo-2"
dir.create(localCRAN)
makeRepo(repoPkgs, path = localCRAN, type = "source")
makeRepo(repoPkgs, path = localCRAN, type = "win.binary")
makeRepo(repoPkgs, path = localCRAN, type = "mac.binary")
options(repos = c(CRAN = "http://cran.ms.unimelb.edu.au/"))
library("devtools", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
options(repos = c(CRAN = "http://cran.ms.unimelb.edu.au/"))
getOptions("repos")
getOption("repos")
devtools::install_github("RevolutionAnalytics/RRT")
quit()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runExample("01_hello")
runExample("02_test")
runExample("02_text")
library(shiny)
runExample("02_text")
runExample("03_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
update.packages()
install.packages("packrat")
library(shiny)
runExample("02_talbe")
runExample("02_text")
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidifyLibraries")
library(ggplot2)
ggplot(data=diamonds, aes(x=carat, y=price, colour=clarity)) +
geom_point(alpha=0.1) + geom_smooth()
plot(carat, price)
datasets()
plot(diamonds$carat, diamonds$price)
plot(diamonds$carat, diamonds$price, xlab="Price", ylab = "Caret")
diamonds
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets", type=p"")
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets", type="p")
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets",
type="p", pch = "19", col="blue")
library(ggplot2)
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets",
type="p", pch = "20", col="blue")
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets",
type="p", pch = 20, col="blue")
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets",
type="p", pch = 20, col="blue")
)
library(ggplot2)
plot(diamonds$carat, diamonds$price, xlab="price", ylab = "carets",
type="p", pch = 20, col="blue")
ggplot(data=diamonds, aes(x=carat, y=price, colour=clarity)) +
geom_point(alpha=0.1) + geom_smooth()
library(miniCRAN)
## Suggested package list for Release 1
baselinePkgs <- c("xlsx","ggplot2","knitr","xtable","zoo","xts","data.table",
"tidyr","RUnit","testthat","roxygen2","memoise","pmml","plyr","reshape2","stringr",
"lubridate","XML","jsonlite","magrittr")
## Get all the dependencies for this package list
repoPkgs <- pkgDep(baselinePkgs)
length(repoPkgs)
head(repoPkgs)
head(repoPkgs.40)
head(repoPkgs,40)
head(repoPkgs,60)
setwd("~/Dropbox/DS Specialization/dataproducts/bmiPitch")
library(slidify)
author(bmiPitchDeck)
author("bmiPitchDeck")
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
BMI & = \frac{mass \(kg\) }{height \(m\) ^2}
slidify("index.Rmd")
where mass (commonally referred to as 'weight') is in kg and height is in metres.
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Dropbox/DS Specialization/dataproducts/bmiApp")
deployApp()
library(shiny)
library(shinyapp)
library(shinyApp)
library(shinyapps)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
setwd("~/Dropbox/DS Specialization/dataproducts/bmiPitch")
slidify()
slidify("index.Rmd")
setwd("~/Dropbox/DS Specialization/dataproducts/bmiPitch/bmiPitchDeck")
setwd("~/Dropbox/DS Specialization/dataproducts/bmiPitch/bmiPitchDeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
nstall_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
library(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
3/5
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
slidify("index.Rmd")
publish(user = "kendravant", repo = "bmiPitchDeck", host = 'github')
